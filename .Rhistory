plotOutput("relationship_plot3"),
h4("Filtered Data"),
tableOutput("filtered_data3")
),
conditionalPanel(
condition = "input.visualization == 'Graphical Query'",
plotlyOutput("relationship_plot4"),
h4("Filtered Data"),
tableOutput("filtered_data4")
)
)
)
)
# Server logic
server <- function(input, output) {
output$heatmap <- renderPlot({
# Filter data based on user inputs
filtered_data <- summary_data %>%
filter(Month >= format(input$dateRange[1], "%Y-%m") &
Month <= format(input$dateRange[2], "%Y-%m"))
if (input$productType != "All") {
filtered_data <- filtered_data %>% filter(Product.Type == input$productType)
}
if (input$orderStatus != "All") {
filtered_data <- filtered_data %>% filter(Order.Status == input$orderStatus)
}
# Create the heatmap
ggplot(filtered_data, aes(x = Month, y = Product.Type, fill = Sales)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap of Sales by Purchase Date, Product Type, and Order Status",
x = "Month",
y = "Product Type",
fill = "Sales Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# Sales Analysis by Product Type
filtered_data2 <- reactive({
cleaned_data %>%
filter(Product.Type == input$product_type2) %>%
group_by(Year = year(Purchase.Date), Month = factor(format(Purchase.Date, "%b"))) %>%
summarise(Total_Quantity = sum(Quantity, na.rm = TRUE), Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop")
})
output$maxRevenueMonth <- renderText({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
max_month <- data %>% filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>% slice(1)
paste("The month with the highest revenue for", input$product_type2, "is", max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
output$quantityPlot <- renderPlot({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = paste("Monthly Sales Quantity for", input$product_type2), x = "Month", y = "Total Quantity", color = "Year") +
theme_minimal()
})
output$revenuePlot <- renderPlot({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
ggplot(data, aes(x = Month, y = Total_Revenue, color = as.factor(Year), group = Year)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = paste("Monthly Sales Revenue for", input$product_type2), x = "Month", y = "Total Revenue", color = "Year") +
theme_minimal()
})
# Customer Behavior Analysis
output$relationship_plot3 <- renderPlot({
req(input$visualization == "Customer Behavior Analysis")
filtered_data3 <- cleaned_data %>%
filter(Age_Group == input$age_group3, Purchase.Date >= input$date_range3[1] & Purchase.Date <= input$date_range3[2], Order.Status == input$order_status3)
ggplot(filtered_data3, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(title = "Add-On Purchases by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
})
output$filtered_data3 <- renderTable({
req(input$visualization == "Customer Behavior Analysis")
cleaned_data %>%
filter(Age_Group == input$age_group3, Purchase.Date >= input$date_range3[1] & Purchase.Date <= input$date_range3[2], Order.Status == input$order_status3) %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
# Graphical Query
reactiveData4 <- reactive({
cleaned_data %>%
filter(
Age_Group %in% input$age_group4,
Purchase.Date >= input$date_range4[1] & Purchase.Date <= input$date_range4[2],
Order.Status %in% input$order_status4,
Rating %in% input$rating4
)
})
output$relationship_plot4 <- renderPlotly({
req(input$visualization == "Graphical Query")
data <- reactiveData4()
p <- if (input$relationship4 == "Product Type vs Shipping Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(title = "Shipping Type by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
} else {
ggplot(data, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(title = "Add-On Purchases by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
}
ggplotly(p, tooltip = c("x", "fill", "count"))
})
output$filtered_data4 <- renderTable({
req(input$visualization == "Graphical Query")
reactiveData4() %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# 加载必要的库
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(lubridate)
# 加载和预处理数据
data <- read.csv("https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/refs/heads/main/Electronic_sales_Sep2023-Sep2024.csv")
data$Purchase.Date <- as.Date(data$Purchase.Date, format = "%Y-%m-%d")
data <- data %>%
mutate(
Age_Group = cut(Age, breaks = seq(0, 100, by = 10),
labels = paste(seq(10, 100, by = 10) - 10, seq(10, 100, by = 10) - 1, sep = "-")),
Add_On_Purchase = ifelse(!is.na(Add.ons.Purchased) & Add.ons.Purchased != "", "Yes", "No")
)
cleaned_data <- data %>%
separate_rows(Add.ons.Purchased, sep = ",") %>%
mutate(Add_On = trimws(Add.ons.Purchased)) %>%
filter(!is.na(Add_On) & Add_On != "")
# 数据预处理
hdata <- read.csv("https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/refs/heads/main/Electronic_sales_Sep2023-Sep2024.csv")
hdata$Purchase.Date <- as.Date(hdata$Purchase.Date)
hdata$Month <- format(hdata$Purchase.Date, "%Y-%m")  # 提取年-月以用于热图聚合
# 按月、产品类型和订单状态汇总数据
summary_data <- hdata %>%
group_by(Month, Product.Type, Order.Status) %>%
summarise(Sales = n())
# UI定义
ui <- fluidPage(
titlePanel("Combined Sales Analysis Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("visualization", "Select Visualization:",
choices = c("Heatmap of Sales",
"Sales Analysis by Product Type",
"Customer Behavior Analysis",
"Graphical Query")),
# 每个可视化的UI元素
conditionalPanel(
condition = "input.visualization == 'Heatmap of Sales'",
dateRangeInput("dateRange1", "Select Date Range:", start = min(data$Purchase.Date), end = max(data$Purchase.Date)),
selectInput("productType1", "Select Product Type:", choices = c("All", unique(data$Product.Type)), selected = "All"),
selectInput("orderStatus1", "Select Order Status:", choices = c("All", unique(data$Order.Status)), selected = "All")
),
conditionalPanel(
condition = "input.visualization == 'Sales Analysis by Product Type'",
selectInput("product_type2", "Select Product Type:", choices = unique(data$Product.Type)),
textOutput("maxRevenueMonth")
),
conditionalPanel(
condition = "input.visualization == 'Customer Behavior Analysis'",
selectInput("age_group3", "Select Age Group:", choices = unique(data$Age_Group)),
dateRangeInput("date_range3", "Select Date Range:", start = min(data$Purchase.Date, na.rm = TRUE), end = max(data$Purchase.Date, na.rm = TRUE)),
selectInput("order_status3", "Select Order Status:", choices = c("Completed", "Cancelled"), selected = "Completed"),
selectInput("relationship3", "Select Relationship to View:", choices = c("Product Type vs Add-On Purchase", "Product Type vs Shipping Type"))
),
conditionalPanel(
condition = "input.visualization == 'Graphical Query'",
checkboxGroupInput("age_group4", "Select Age Group:", choices = unique(data$Age_Group), selected = unique(data$Age_Group)[1]),
dateRangeInput("date_range4", "Select Date Range:", start = min(data$Purchase.Date, na.rm = TRUE), end = max(data$Purchase.Date, na.rm = TRUE)),
checkboxGroupInput("order_status4", "Select Order Status:", choices = c("Completed", "Cancelled"), selected = "Completed"),
checkboxGroupInput("rating4", "Select Rating:", choices = unique(data$Rating), selected = unique(data$Rating)[1]),
selectInput("relationship4", "Select Relationship to View:", choices = c("Product Type vs Add-On Purchase", "Product Type vs Shipping Type"))
)
),
mainPanel(
# 每个可视化的输出面板
conditionalPanel(
condition = "input.visualization == 'Heatmap of Sales'",
plotOutput("heatmap")
),
conditionalPanel(
condition = "input.visualization == 'Sales Analysis by Product Type'",
tabsetPanel(
tabPanel("Sales Quantity", plotOutput("quantityPlot")),
tabPanel("Sales Revenue", plotOutput("revenuePlot"))
)
),
conditionalPanel(
condition = "input.visualization == 'Customer Behavior Analysis'",
plotOutput("relationship_plot3"),
h4("Filtered Data"),
tableOutput("filtered_data3")
),
conditionalPanel(
condition = "input.visualization == 'Graphical Query'",
plotlyOutput("relationship_plot4"),
h4("Filtered Data"),
tableOutput("filtered_data4")
)
)
)
)
# 服务器逻辑
server <- function(input, output) {
output$heatmap <- renderPlot({
req(input$dateRange1, input$productType1, input$orderStatus1)  # 确保输入有值
# 基于用户输入过滤数据
filtered_data <- summary_data %>%
filter(Month >= format(input$dateRange1[1], "%Y-%m") &
Month <= format(input$dateRange1[2], "%Y-%m"))
if (input$productType1 != "All") {
filtered_data <- filtered_data %>% filter(Product.Type == input$productType1)
}
if (input$orderStatus1 != "All") {
filtered_data <- filtered_data %>% filter(Order.Status == input$orderStatus1)
}
# 创建热图
ggplot(filtered_data, aes(x = Month, y = Product.Type, fill = Sales)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap of Sales by Purchase Date, Product Type, and Order Status",
x = "Month",
y = "Product Type",
fill = "Sales Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# 销售分析 - 按产品类型
filtered_data2 <- reactive({
cleaned_data %>%
filter(Product.Type == input$product_type2) %>%
group_by(Year = year(Purchase.Date), Month = factor(format(Purchase.Date, "%b"))) %>%
summarise(Total_Quantity = sum(Quantity, na.rm = TRUE), Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop")
})
output$maxRevenueMonth <- renderText({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
max_month <- data %>% filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>% slice(1)
paste("The month with the highest revenue for", input$product_type2, "is", max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
output$quantityPlot <- renderPlot({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = paste("Monthly Sales Quantity for", input$product_type2), x = "Month", y = "Total Quantity", color = "Year") +
theme_minimal()
})
output$revenuePlot <- renderPlot({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
ggplot(data, aes(x = Month, y = Total_Revenue, color = as.factor(Year), group = Year)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = paste("Monthly Sales Revenue for", input$product_type2), x = "Month", y = "Total Revenue", color = "Year") +
theme_minimal()
})
# 客户行为分析
output$relationship_plot3 <- renderPlot({
req(input$visualization == "Customer Behavior Analysis")
filtered_data3 <- cleaned_data %>%
filter(Age_Group == input$age_group3, Purchase.Date >= input$date_range3[1] & Purchase.Date <= input$date_range3[2], Order.Status == input$order_status3)
ggplot(filtered_data3, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(title = "Add-On Purchases by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
})
output$filtered_data3 <- renderTable({
req(input$visualization == "Customer Behavior Analysis")
cleaned_data %>%
filter(Age_Group == input$age_group3, Purchase.Date >= input$date_range3[1] & Purchase.Date <= input$date_range3[2], Order.Status == input$order_status3) %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
# 图形查询
reactiveData4 <- reactive({
cleaned_data %>%
filter(
Age_Group %in% input$age_group4,
Purchase.Date >= input$date_range4[1] & Purchase.Date <= input$date_range4[2],
Order.Status %in% input$order_status4,
Rating %in% input$rating4
)
})
output$relationship_plot4 <- renderPlotly({
req(input$visualization == "Graphical Query")
data <- reactiveData4()
p <- if (input$relationship4 == "Product Type vs Shipping Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(title = "Shipping Type by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
} else {
ggplot(data, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(title = "Add-On Purchases by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
}
ggplotly(p, tooltip = c("x", "fill", "count"))
})
output$filtered_data4 <- renderTable({
req(input$visualization == "Graphical Query")
reactiveData4() %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# 运行应用程序
shinyApp(ui = ui, server = server)
# 加载必要的库
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(lubridate)
# 加载和预处理数据
data <- read.csv("https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/refs/heads/main/Electronic_sales_Sep2023-Sep2024.csv")
data$Purchase.Date <- as.Date(data$Purchase.Date, format = "%Y-%m-%d")
data <- data %>%
mutate(
Age_Group = cut(Age, breaks = seq(0, 100, by = 10),
labels = paste(seq(10, 100, by = 10) - 10, seq(10, 100, by = 10) - 1, sep = "-")),
Add_On_Purchase = ifelse(!is.na(Add.ons.Purchased) & Add.ons.Purchased != "", "Yes", "No")
)
cleaned_data <- data %>%
separate_rows(Add.ons.Purchased, sep = ",") %>%
mutate(Add_On = trimws(Add.ons.Purchased)) %>%
filter(!is.na(Add_On) & Add_On != "")
# 数据预处理
hdata <- read.csv("https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/refs/heads/main/Electronic_sales_Sep2023-Sep2024.csv")
hdata$Purchase.Date <- as.Date(hdata$Purchase.Date)
hdata$Month <- format(hdata$Purchase.Date, "%Y-%m")  # 提取年-月以用于热图聚合
# 按月、产品类型和订单状态汇总数据
summary_data <- hdata %>%
group_by(Month, Product.Type, Order.Status) %>%
summarise(Sales = n())
# UI定义
ui <- fluidPage(
titlePanel("Combined Sales Analysis Dashboard"),
sidebarLayout(
sidebarPanel(
selectInput("visualization", "Select Visualization:",
choices = c("Heatmap of Sales",
"Sales Analysis by Product Type",
"Customer Behavior Analysis",
"Graphical Query")),
# 每个可视化的UI元素
conditionalPanel(
condition = "input.visualization == 'Heatmap of Sales'",
dateRangeInput("dateRange1", "Select Date Range:", start = min(data$Purchase.Date), end = max(data$Purchase.Date)),
selectInput("productType1", "Select Product Type:", choices = c("All", unique(data$Product.Type)), selected = "All"),
selectInput("orderStatus1", "Select Order Status:", choices = c("All", unique(data$Order.Status)), selected = "All")
),
conditionalPanel(
condition = "input.visualization == 'Sales Analysis by Product Type'",
selectInput("product_type2", "Select Product Type:", choices = unique(data$Product.Type)),
textOutput("maxRevenueMonth")
),
conditionalPanel(
condition = "input.visualization == 'Customer Behavior Analysis'",
selectInput("age_group3", "Select Age Group:", choices = unique(data$Age_Group)),
dateRangeInput("date_range3", "Select Date Range:", start = min(data$Purchase.Date, na.rm = TRUE), end = max(data$Purchase.Date, na.rm = TRUE)),
selectInput("order_status3", "Select Order Status:", choices = c("Completed", "Cancelled"), selected = "Completed"),
selectInput("relationship3", "Select Relationship to View:", choices = c("Product Type vs Add-On Purchase", "Product Type vs Shipping Type"))
),
conditionalPanel(
condition = "input.visualization == 'Graphical Query'",
checkboxGroupInput("age_group4", "Select Age Group:", choices = unique(data$Age_Group), selected = unique(data$Age_Group)[1]),
dateRangeInput("date_range4", "Select Date Range:", start = min(data$Purchase.Date, na.rm = TRUE), end = max(data$Purchase.Date, na.rm = TRUE)),
checkboxGroupInput("order_status4", "Select Order Status:", choices = c("Completed", "Cancelled"), selected = "Completed"),
checkboxGroupInput("rating4", "Select Rating:", choices = unique(data$Rating), selected = unique(data$Rating)[1]),
selectInput("relationship4", "Select Relationship to View:", choices = c("Product Type vs Add-On Purchase", "Product Type vs Shipping Type"))
)
),
mainPanel(
# 每个可视化的输出面板
conditionalPanel(
condition = "input.visualization == 'Heatmap of Sales'",
plotOutput("heatmap")
),
conditionalPanel(
condition = "input.visualization == 'Sales Analysis by Product Type'",
tabsetPanel(
tabPanel("Sales Quantity", plotOutput("quantityPlot")),
tabPanel("Sales Revenue", plotOutput("revenuePlot"))
)
),
conditionalPanel(
condition = "input.visualization == 'Customer Behavior Analysis'",
plotOutput("relationship_plot3"),
h4("Filtered Data"),
tableOutput("filtered_data3")
),
conditionalPanel(
condition = "input.visualization == 'Graphical Query'",
plotlyOutput("relationship_plot4"),
h4("Filtered Data"),
tableOutput("filtered_data4")
)
)
)
)
# 服务器逻辑
server <- function(input, output) {
output$heatmap <- renderPlot({
req(input$dateRange1, input$productType1, input$orderStatus1)  # 确保输入有值
# 基于用户输入过滤数据
filtered_data <- summary_data %>%
filter(Month >= format(input$dateRange1[1], "%Y-%m") &
Month <= format(input$dateRange1[2], "%Y-%m"))
if (input$productType1 != "All") {
filtered_data <- filtered_data %>% filter(Product.Type == input$productType1)
}
if (input$orderStatus1 != "All") {
filtered_data <- filtered_data %>% filter(Order.Status == input$orderStatus1)
}
# 创建热图
ggplot(filtered_data, aes(x = Month, y = Product.Type, fill = Sales)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Heatmap of Sales by Purchase Date, Product Type, and Order Status",
x = "Month",
y = "Product Type",
fill = "Sales Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
# 销售分析 - 按产品类型
filtered_data2 <- reactive({
cleaned_data %>%
filter(Product.Type == input$product_type2) %>%
group_by(Year = year(Purchase.Date), Month = factor(format(Purchase.Date, "%b"))) %>%
summarise(Total_Quantity = sum(Quantity, na.rm = TRUE), Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop")
})
output$maxRevenueMonth <- renderText({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
max_month <- data %>% filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>% slice(1)
paste("The month with the highest revenue for", input$product_type2, "is", max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
output$quantityPlot <- renderPlot({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = paste("Monthly Sales Quantity for", input$product_type2), x = "Month", y = "Total Quantity", color = "Year") +
theme_minimal()
})
output$revenuePlot <- renderPlot({
req(input$visualization == "Sales Analysis by Product Type")
data <- filtered_data2()
ggplot(data, aes(x = Month, y = Total_Revenue, color = as.factor(Year), group = Year)) +
geom_line(size = 1) + geom_point(size = 2) +
labs(title = paste("Monthly Sales Revenue for", input$product_type2), x = "Month", y = "Total Revenue", color = "Year") +
theme_minimal()
})
# 客户行为分析
output$relationship_plot3 <- renderPlot({
req(input$visualization == "Customer Behavior Analysis")
filtered_data3 <- cleaned_data %>%
filter(Age_Group == input$age_group3, Purchase.Date >= input$date_range3[1] & Purchase.Date <= input$date_range3[2], Order.Status == input$order_status3)
ggplot(filtered_data3, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(title = "Add-On Purchases by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
})
output$filtered_data3 <- renderTable({
req(input$visualization == "Customer Behavior Analysis")
cleaned_data %>%
filter(Age_Group == input$age_group3, Purchase.Date >= input$date_range3[1] & Purchase.Date <= input$date_range3[2], Order.Status == input$order_status3) %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
# 图形查询
reactiveData4 <- reactive({
cleaned_data %>%
filter(
Age_Group %in% input$age_group4,
Purchase.Date >= input$date_range4[1] & Purchase.Date <= input$date_range4[2],
Order.Status %in% input$order_status4,
Rating %in% input$rating4
)
})
output$relationship_plot4 <- renderPlotly({
req(input$visualization == "Graphical Query")
data <- reactiveData4()
p <- if (input$relationship4 == "Product Type vs Shipping Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(title = "Shipping Type by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
} else {
ggplot(data, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(title = "Add-On Purchases by Product Type", x = "Product Type", y = "Count") +
theme_minimal()
}
ggplotly(p, tooltip = c("x", "fill", "count"))
})
output$filtered_data4 <- renderTable({
req(input$visualization == "Graphical Query")
reactiveData4() %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# 运行应用程序
shinyApp(ui = ui, server = server)
