mutate(
Purchase.Date = as.Date(Purchase.Date, format = "%Y-%m-%d"),
Month = month(Purchase.Date, label = TRUE, abbr = TRUE),
Year = year(Purchase.Date),
Age_Group = cut(Age, breaks = seq(0, 100, by = 10),
labels = paste(seq(10, 100, by = 10) - 10, seq(10, 100, by = 10) - 1, sep = "-")),
Add_On_Purchase = ifelse(!is.na(Add.ons.Purchased) & Add.ons.Purchased != "", "Yes", "No")
)
# 分离多项 Add-On 并清理数据
cleaned_data <- electronic_sale_data %>%
separate_rows(Add.ons.Purchased, sep = ",") %>%
mutate(Add_On = trimws(Add.ons.Purchased)) %>%
filter(!is.na(Add_On) & Add_On != "")
# 自定义月份顺序（从9月开始）
month_levels <- c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug")
# 创建 Shiny UI
ui <- fluidPage(
titlePanel("Sales and Customer Behavior Analysis (2023-09 to 2024-09)"),
sidebarLayout(
sidebarPanel(
selectInput("visualization_type", "Select Visualization:",
choices = c("Sales Quantity and Revenue", "Add-On Purchases by Product Type", "Shipping Type by Product Type")),
selectInput("product_type", "Select Product Type:", choices = unique(electronic_sale_data$Product.Type)),
selectInput("age_group", "Select Age Group:", choices = unique(electronic_sale_data$Age_Group)),
dateRangeInput("date_range", "Select Date Range:",
start = min(electronic_sale_data$Purchase.Date, na.rm = TRUE),
end = max(electronic_sale_data$Purchase.Date, na.rm = TRUE)),
selectInput("order_status", "Select Order Status:", choices = c("Completed", "Cancelled"), selected = "Completed"),
textOutput("maxRevenueMonth")  # 输出最大销售额月份信息
),
mainPanel(
plotOutput("mainPlot"),
h4("Filtered Data"),
tableOutput("filtered_data")
)
)
)
# Shiny Server
server <- function(input, output) {
# 数据过滤器
filtered_data <- reactive({
electronic_sale_data %>%
filter(
Product.Type == input$product_type,
Age_Group == input$age_group,
Purchase.Date >= input$date_range[1] & Purchase.Date <= input$date_range[2],
Order.Status == input$order_status
)
})
# 计算销售额最高的月份
output$maxRevenueMonth <- renderText({
data <- filtered_data()
max_month <- data %>%
group_by(Year, Month) %>%
summarise(Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop") %>%
filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>%
slice(1)
paste("The month with the highest revenue for", input$product_type, "is",
max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
# 主图表渲染
output$mainPlot <- renderPlot({
data <- filtered_data()
if (input$visualization_type == "Sales Quantity and Revenue") {
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = paste("Monthly Sales Quantity for", input$product_type, "(2023-09 to 2024-09)"),
x = "Month",
y = "Total Quantity",
color = "Year"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_x_discrete(limits = month_levels, drop = FALSE)
} else if (input$visualization_type == "Add-On Purchases by Product Type") {
ggplot(cleaned_data %>% filter(Age_Group == input$age_group), aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(
title = paste("Add-On Purchases by Product Type for Age Group", input$age_group),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Accessory" = "aquamarine4", "Extended Warranty" = "antiquewhite2", "Impulse Item" = "azure3")) +
theme_minimal() +
theme(legend.position = "top")
} else if (input$visualization_type == "Shipping Type by Product Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(
title = paste("Shipping Type by Product Type for Age Group", input$age_group),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Standard" = "aquamarine4", "Express" = "antiquewhite2", "Overnight" = "azure3", "Same Day" = "cyan3", "Expedited" = "bisque4")) +
theme_minimal() +
theme(legend.position = "top")
}
})
# 显示过滤后的数据
output$filtered_data <- renderTable({
filtered_data() %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# 运行 Shiny 应用
shinyApp(ui = ui, server = server)
# 加载必要的库
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
# 加载数据集
url <- "https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/main/Electronic_sales_Sep2023-Sep2024.csv"
electronic_sale_data <- read.csv(url)
# 数据预处理：添加月份和年份，并确保每个产品类型在时间范围内的每个月都有数据
electronic_sale_data <- electronic_sale_data %>%
mutate(
Purchase.Date = as.Date(Purchase.Date, format = "%Y-%m-%d"),
Month = month(Purchase.Date, label = TRUE, abbr = TRUE),
Year = year(Purchase.Date),
Age_Group = cut(Age, breaks = seq(0, 100, by = 10),
labels = paste(seq(10, 100, by = 10) - 10, seq(10, 100, by = 10) - 1, sep = "-")),
Add_On_Purchase = ifelse(!is.na(Add.ons.Purchased) & Add.ons.Purchased != "", "Yes", "No")
)
# 分离多项 Add-On 并清理数据
cleaned_data <- electronic_sale_data %>%
separate_rows(Add.ons.Purchased, sep = ",") %>%
mutate(Add_On = trimws(Add.ons.Purchased)) %>%
filter(!is.na(Add_On) & Add_On != "")
# 自定义月份顺序（从9月开始）
month_levels <- c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug")
# 创建 Shiny UI
ui <- fluidPage(
titlePanel("Sales and Customer Behavior Analysis (2023-09 to 2024-09)"),
sidebarLayout(
sidebarPanel(
selectInput("visualization_type", "Select Visualization:",
choices = c("Sales Quantity and Revenue", "Add-On Purchases by Product Type", "Shipping Type by Product Type")),
selectInput("product_type", "Select Product Type:", choices = unique(electronic_sale_data$Product.Type)),
selectInput("age_group", "Select Age Group:", choices = unique(electronic_sale_data$Age_Group)),
dateRangeInput("date_range", "Select Date Range:",
start = min(electronic_sale_data$Purchase.Date, na.rm = TRUE),
end = max(electronic_sale_data$Purchase.Date, na.rm = TRUE)),
selectInput("order_status", "Select Order Status:", choices = c("Completed", "Cancelled"), selected = "Completed"),
textOutput("maxRevenueMonth")  # 输出最大销售额月份信息
),
mainPanel(
plotOutput("mainPlot"),
h4("Filtered Data"),
tableOutput("filtered_data")
)
)
)
# Shiny Server
server <- function(input, output) {
# 数据过滤器
filtered_data <- reactive({
electronic_sale_data %>%
filter(
Product.Type == input$product_type,
Age_Group == input$age_group,
Purchase.Date >= input$date_range[1] & Purchase.Date <= input$date_range[2],
Order.Status == input$order_status
)
})
# 计算销售额最高的月份
output$maxRevenueMonth <- renderText({
data <- filtered_data()
max_month <- data %>%
group_by(Year, Month) %>%
summarise(Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop") %>%
filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>%
slice(1)
paste("The month with the highest revenue for", input$product_type, "is",
max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
# 主图表渲染
output$mainPlot <- renderPlot({
data <- filtered_data()
if (input$visualization_type == "Sales Quantity and Revenue") {
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = paste("Monthly Sales Quantity for", input$product_type, "(2023-09 to 2024-09)"),
x = "Month",
y = "Total Quantity",
color = "Year"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_x_discrete(limits = month_levels, drop = FALSE)
} else if (input$visualization_type == "Add-On Purchases by Product Type") {
ggplot(cleaned_data %>% filter(Age_Group == input$age_group), aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(
title = paste("Add-On Purchases by Product Type for Age Group", input$age_group),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Accessory" = "aquamarine4", "Extended Warranty" = "antiquewhite2", "Impulse Item" = "azure3")) +
theme_minimal() +
theme(legend.position = "top")
} else if (input$visualization_type == "Shipping Type by Product Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(
title = paste("Shipping Type by Product Type for Age Group", input$age_group),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Standard" = "aquamarine4", "Express" = "antiquewhite2", "Overnight" = "azure3", "Same Day" = "cyan3", "Expedited" = "bisque4")) +
theme_minimal() +
theme(legend.position = "top")
}
})
# 显示过滤后的数据
output$filtered_data <- renderTable({
filtered_data() %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# 运行 Shiny 应用
shinyApp(ui = ui, server = server)
# 加载必要的库
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
# 加载数据集
url <- "https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/main/Electronic_sales_Sep2023-Sep2024.csv"
electronic_sale_data <- read.csv(url)
# 数据预处理
electronic_sale_data <- electronic_sale_data %>%
mutate(
Purchase.Date = as.Date(Purchase.Date, format = "%Y-%m-%d"),
Month = month(Purchase.Date, label = TRUE, abbr = TRUE),
Year = year(Purchase.Date),
Age_Group = cut(Age, breaks = seq(0, 100, by = 10),
labels = paste(seq(10, 100, by = 10) - 10, seq(10, 100, by = 10) - 1, sep = "-")),
Add_On_Purchase = ifelse(!is.na(Add.ons.Purchased) & Add.ons.Purchased != "", "Yes", "No")
)
# 分离多项 Add-On 并清理数据
cleaned_data <- electronic_sale_data %>%
separate_rows(Add.ons.Purchased, sep = ",") %>%
mutate(Add_On = trimws(Add.ons.Purchased)) %>%
filter(!is.na(Add_On) & Add_On != "")
# 自定义月份顺序
month_levels <- c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug")
# 创建 Shiny UI
ui <- fluidPage(
titlePanel("Sales and Customer Behavior Analysis (2023-09 to 2024-09)"),
sidebarLayout(
sidebarPanel(
selectInput("visualization_type", "Select Visualization:",
choices = c("Sales Quantity and Revenue", "Add-On Purchases by Product Type", "Shipping Type by Product Type")),
# Conditional inputs for each visualization type
conditionalPanel(
condition = "input.visualization_type == 'Sales Quantity and Revenue'",
selectInput("product_type", "Select Product Type:", choices = unique(electronic_sale_data$Product.Type)),
textOutput("maxRevenueMonth")  # 显示最大销售额月份信息
),
conditionalPanel(
condition = "input.visualization_type == 'Add-On Purchases by Product Type'",
selectInput("age_group", "Select Age Group:", choices = unique(electronic_sale_data$Age_Group)),
selectInput("order_status", "Select Order Status:", choices = c("Completed", "Cancelled"))
),
conditionalPanel(
condition = "input.visualization_type == 'Shipping Type by Product Type'",
selectInput("age_group_shipping", "Select Age Group:", choices = unique(electronic_sale_data$Age_Group)),
dateRangeInput("date_range", "Select Date Range:",
start = min(electronic_sale_data$Purchase.Date, na.rm = TRUE),
end = max(electronic_sale_data$Purchase.Date, na.rm = TRUE))
)
),
mainPanel(
plotOutput("mainPlot"),
h4("Filtered Data"),
tableOutput("filtered_data")
)
)
)
# Shiny Server
server <- function(input, output) {
# 数据过滤器
filtered_data <- reactive({
if (input$visualization_type == "Sales Quantity and Revenue") {
electronic_sale_data %>%
filter(Product.Type == input$product_type)
} else if (input$visualization_type == "Add-On Purchases by Product Type") {
cleaned_data %>%
filter(Age_Group == input$age_group,
Order.Status == input$order_status)
} else if (input$visualization_type == "Shipping Type by Product Type") {
electronic_sale_data %>%
filter(Age_Group == input$age_group_shipping,
Purchase.Date >= input$date_range[1] & Purchase.Date <= input$date_range[2])
}
})
# 计算销售额最高的月份
output$maxRevenueMonth <- renderText({
req(input$product_type)
data <- filtered_data()
max_month <- data %>%
group_by(Year, Month) %>%
summarise(Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop") %>%
filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>%
slice(1)
paste("The month with the highest revenue for", input$product_type, "is",
max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
# 主图表渲染
output$mainPlot <- renderPlot({
data <- filtered_data()
if (input$visualization_type == "Sales Quantity and Revenue") {
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = paste("Monthly Sales Quantity for", input$product_type, "(2023-09 to 2024-09)"),
x = "Month",
y = "Total Quantity",
color = "Year"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_x_discrete(limits = month_levels, drop = FALSE)
} else if (input$visualization_type == "Add-On Purchases by Product Type") {
ggplot(data, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(
title = paste("Add-On Purchases by Product Type for Age Group", input$age_group),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Accessory" = "aquamarine4", "Extended Warranty" = "antiquewhite2", "Impulse Item" = "azure3")) +
theme_minimal() +
theme(legend.position = "top")
} else if (input$visualization_type == "Shipping Type by Product Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(
title = paste("Shipping Type by Product Type for Age Group", input$age_group_shipping),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Standard" = "aquamarine4", "Express" = "antiquewhite2", "Overnight" = "azure3", "Same Day" = "cyan3", "Expedited" = "bisque4")) +
theme_minimal() +
theme(legend.position = "top")
}
})
# 显示过滤后的数据
output$filtered_data <- renderTable({
filtered_data() %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# 运行 Shiny 应用
shinyApp(ui = ui, server = server)
# 加载必要的库
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(tidyr)
# 加载数据集
url <- "https://raw.githubusercontent.com/Aaron00Yu94/Milestone2/main/Electronic_sales_Sep2023-Sep2024.csv"
electronic_sale_data <- read.csv(url)
# 数据预处理
electronic_sale_data <- electronic_sale_data %>%
mutate(
Purchase.Date = as.Date(Purchase.Date, format = "%Y-%m-%d"),
Month = month(Purchase.Date, label = TRUE, abbr = TRUE),
Year = year(Purchase.Date),
Age_Group = cut(Age, breaks = seq(0, 100, by = 10),
labels = paste(seq(10, 100, by = 10) - 10, seq(10, 100, by = 10) - 1, sep = "-")),
Add_On_Purchase = ifelse(!is.na(Add.ons.Purchased) & Add.ons.Purchased != "", "Yes", "No")
)
# 分离多项 Add-On 并清理数据
cleaned_data <- electronic_sale_data %>%
separate_rows(Add.ons.Purchased, sep = ",") %>%
mutate(Add_On = trimws(Add.ons.Purchased)) %>%
filter(!is.na(Add_On) & Add_On != "")
# 自定义月份顺序
month_levels <- c("Sep", "Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug")
# 创建 Shiny UI
ui <- fluidPage(
titlePanel("Sales and Customer Behavior Analysis (2023-09 to 2024-09)"),
sidebarLayout(
sidebarPanel(
selectInput("visualization_type", "Select Visualization:",
choices = c("Sales Quantity and Revenue", "Add-On Purchases by Product Type", "Shipping Type by Product Type")),
# Conditional inputs for each visualization type
conditionalPanel(
condition = "input.visualization_type == 'Sales Quantity and Revenue'",
selectInput("product_type", "Select Product Type:", choices = unique(electronic_sale_data$Product.Type)),
textOutput("maxRevenueMonth")  # 显示最大销售额月份信息
),
conditionalPanel(
condition = "input.visualization_type == 'Add-On Purchases by Product Type'",
selectInput("age_group", "Select Age Group:", choices = unique(electronic_sale_data$Age_Group)),
selectInput("order_status", "Select Order Status:", choices = c("Completed", "Cancelled"))
),
conditionalPanel(
condition = "input.visualization_type == 'Shipping Type by Product Type'",
selectInput("age_group_shipping", "Select Age Group:", choices = unique(electronic_sale_data$Age_Group)),
dateRangeInput("date_range", "Select Date Range:",
start = min(electronic_sale_data$Purchase.Date, na.rm = TRUE),
end = max(electronic_sale_data$Purchase.Date, na.rm = TRUE))
)
),
mainPanel(
plotOutput("mainPlot"),
h4("Filtered Data"),
tableOutput("filtered_data")
)
)
)
# Shiny Server
server <- function(input, output) {
# 数据过滤器
filtered_data <- reactive({
data <- NULL
if (input$visualization_type == "Sales Quantity and Revenue") {
data <- electronic_sale_data %>%
filter(Product.Type == input$product_type)
} else if (input$visualization_type == "Add-On Purchases by Product Type") {
data <- cleaned_data %>%
filter(Age_Group == input$age_group,
Order.Status == input$order_status)
} else if (input$visualization_type == "Shipping Type by Product Type") {
data <- electronic_sale_data %>%
filter(Age_Group == input$age_group_shipping,
Purchase.Date >= input$date_range[1] & Purchase.Date <= input$date_range[2])
}
validate(
need(!is.null(data) && nrow(data) > 0, "No data available for the selected filters.")
)
return(data)
})
# 计算销售额最高的月份
output$maxRevenueMonth <- renderText({
req(input$product_type)
data <- filtered_data()
if (!"Total.Price" %in% colnames(data)) {
return("Total.Price column not found in data.")
}
max_month <- data %>%
group_by(Year, Month) %>%
summarise(Total_Revenue = sum(Total.Price, na.rm = TRUE), .groups = "drop") %>%
filter(Total_Revenue == max(Total_Revenue, na.rm = TRUE)) %>%
slice(1)
paste("The month with the highest revenue for", input$product_type, "is",
max_month$Month, max_month$Year, "with a total revenue of $", round(max_month$Total_Revenue, 2))
})
# 主图表渲染
output$mainPlot <- renderPlot({
data <- filtered_data()
if (input$visualization_type == "Sales Quantity and Revenue") {
ggplot(data, aes(x = Month, y = Total_Quantity, color = as.factor(Year), group = Year)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = paste("Monthly Sales Quantity for", input$product_type, "(2023-09 to 2024-09)"),
x = "Month",
y = "Total Quantity",
color = "Year"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_x_discrete(limits = month_levels, drop = FALSE)
} else if (input$visualization_type == "Add-On Purchases by Product Type") {
ggplot(data, aes(x = Product.Type, fill = Add_On)) +
geom_bar(position = "dodge") +
labs(
title = paste("Add-On Purchases by Product Type for Age Group", input$age_group),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Accessory" = "aquamarine4", "Extended Warranty" = "antiquewhite2", "Impulse Item" = "azure3")) +
theme_minimal() +
theme(legend.position = "top")
} else if (input$visualization_type == "Shipping Type by Product Type") {
ggplot(data, aes(x = Product.Type, fill = Shipping.Type)) +
geom_bar(position = "dodge") +
labs(
title = paste("Shipping Type by Product Type for Age Group", input$age_group_shipping),
x = "Product Type", y = "Count"
) +
scale_fill_manual(values = c("Standard" = "aquamarine4", "Express" = "antiquewhite2", "Overnight" = "azure3", "Same Day" = "cyan3", "Expedited" = "bisque4")) +
theme_minimal() +
theme(legend.position = "top")
}
})
# 显示过滤后的数据
output$filtered_data <- renderTable({
data <- filtered_data()
if (is.null(data) || nrow(data) == 0) return(NULL)
data %>%
select(Customer.ID, Age, Gender, Loyalty.Member, Product.Type, SKU, Order.Status, Total.Price, Add.on.Total)
})
}
# 运行 Shiny 应用
